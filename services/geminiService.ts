
import { GoogleGenAI, Modality, Type } from "@google/genai";

if (!process.env.API_KEY) {
    throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

const fileToBase64 = (file: File): Promise<string> => {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onload = () => {
            const result = reader.result as string;
            // Remove the data URL prefix e.g. "data:image/png;base64,"
            resolve(result.split(',')[1]);
        };
        reader.onerror = error => reject(error);
    });
};

export const generateMinecraftImage = async (imageFile: File): Promise<string> => {
    const base64ImageData = await fileToBase64(imageFile);
    const mimeType = imageFile.type;

    const prompt =
     `Transform this image into an authentic Minecraft-style voxel character. Create (minecraft voxel art:1.5) with (perfect cubic geometry:1.4) and (64x64 pixel texture style:1.3). The character must maintain all original clothing, colors, pose, and features but rendered as (blocky minecraft player model:1.4) with cubic head, cube-shaped limbs, and flat surface textures. Use only Minecraft's color palette with sharp pixelated edges, flat lighting, and no smooth surfaces. Result should look like in-game Minecraft character screenshot.

            Technical requirements:
            - Pure cube/voxel geometry only
            - Minecraft's 16-color-per-block limitation  
            - Sharp edges with zero anti-aliasing
            - Flat uniform lighting
            - Blocky proportions and cubic head
            - 64x64 texture appearance
            - No realistic shading or materials

Negative prompt: realistic, smooth, anti-aliasing, rounded edges, curved surfaces, photorealistic, high poly, smooth shading, realistic lighting, gradients, soft textures, detailed skin, smooth geometry, cinematic rendering, organic shapes, complex materials, normal maps, reflection, subsurface scattering, motion blur, depth of field, realistic proportions, PBR materials, bump maps, specular highlights, ambient occlusion`;

    const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash-image-preview',
        contents: {
            parts: [
                {
                    inlineData: {
                        data: base64ImageData,
                        mimeType: mimeType,
                    },
                },
                {
                    text: prompt,
                },
            ],
        },
        config: {
            responseModalities: [Modality.IMAGE, Modality.TEXT],
        },
    });

    for (const part of response.candidates[0].content.parts) {
        if (part.inlineData) {
            const base64ImageBytes: string = part.inlineData.data;
            return `data:${part.inlineData.mimeType};base64,${base64ImageBytes}`;
        }
    }

    throw new Error("No image was generated by the API.");
};


export const generateIdeas = async (): Promise<string[]> => {
    const prompt = `Generate a list of 10 creative and diverse prompts for a user who wants to transform photos into the Minecraft style. For example, 'A photo of a cat wearing a wizard hat' or 'A selfie at the top of a mountain'. Return your response as a valid JSON object with a single key "ideas" which is an array of 10 strings. Do not include any other text, formatting, or markdown backticks.`;

    const response = await ai.models.generateContent({
        model: "gemini-2.5-flash",
        contents: prompt,
        config: {
            responseMimeType: "application/json",
            responseSchema: {
                type: Type.OBJECT,
                properties: {
                    ideas: {
                        type: Type.ARRAY,
                        items: {
                            type: Type.STRING,
                        }
                    }
                },
                required: ['ideas']
            },
        },
    });
    
    try {
        const json = JSON.parse(response.text);
        return json.ideas || [];
    } catch (e) {
        console.error("Failed to parse JSON from Gemini:", response.text);
        throw new Error("Received invalid JSON for ideas.");
    }
};
